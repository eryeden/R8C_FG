/***********************************************************************/
/*                                                                     */
/*  FILE        :functiongenerator.cpp                                 */
/*  DATE        :Fri, May 08, 2015                                     */
/*  DESCRIPTION :main program file.                                    */
/*  CPU GROUP   :29                                                    */
/*                                                                     */
/*  This file is generated by Renesas Project Generator (Ver.4.19).    */
/*  NOTE:THIS IS A TYPICAL EXAMPLE.                                    */
/***********************************************************************/

#include "sfr_r829.h"
#include "Dac.hpp"
#include "ClockSettings.hpp"
#include "SSUbus.hpp"
#include "Timer.hpp"
#include "ASawtooth.hpp"
#include "ASine.hpp"
#include "ATriangle.hpp"
#include "APWM.hpp"
#include "ANoise.hpp"

//#include "Clock.hpp"

void main(void);

//class INTRtest : public INTRbase{
//public:
//	unsigned int j;
//	Dac dac;
//	INTRtest(){
//		j = 0;
//	}
//	void intr1(){
//		p1_0 = !p1_0;
//		j = (j > (0x0FFF - 1)) ? 0 : j + 100;
//		dac.WriteVoltageA(j);
//	}
//	void op(){
//		intr1();
//	}
//};

class INTRsawave : public ASawtooth, public INTRbase{
public:
	INTRsawave(unsigned int freq, unsigned int phase, float gain)
		: ASawtooth(freq, phase, gain){};
	unsigned int j;
	Dac dac;
	void op(){
		//j = Out();
		j = GetValueNow();
		dac.WriteVoltageA(j);
	}
};

class INTRsinewave : public ASine, public INTRbase{
public:
	INTRsinewave(unsigned int freq, unsigned int phase, float gain)
		: ASine(freq, phase, gain){};
	unsigned int j;
	Dac dac;
	void op(){
		j = Out();
		//j = GetValueNow();
		dac.WriteVoltageA(j);
	}
};

class INTRtriwave : public ATriangle, public INTRbase{
public:
	INTRtriwave(unsigned int freq, unsigned int phase, float gain)
		: ATriangle(freq, phase, gain){};
	unsigned int j;
	Dac dac;
	void op(){
		//j = Out();
		j = GetValueNow();
		dac.WriteVoltageA(j);
	}
};

class INTRpwmwave : public APWM, public INTRbase{
public:
	INTRpwmwave(unsigned int freq, unsigned int phase, float gain)
		: APWM(freq, phase, gain){};
	unsigned int j;
	Dac dac;
	void op(){
		//j = Out();
		j = GetValueNow();
		dac.WriteVoltageA(j);
	}
};

class INTRnoisewave : public ANoise, public INTRbase{
public:
	INTRnoisewave(unsigned int freq, unsigned int phase, float gain)
		: ANoise(freq, phase, gain){};
	unsigned int j;
	Dac dac;
	void op(){
		j = Out();
		//j = GetValueNow();
		dac.WriteVoltageA(j);
	}
};


void main(void)
{
	
	ClockSettings clkstg;
	clkstg.Initialize();

	//static Dac dac;
	//Dac::SInitialize();
	//Dac dac;

	//INTRtest intr;



	pd1_1 = 1;
	p1drr1 = 1;
	p1_1 = 0;

	pd1_0 = 1;
	p1_0 = 0;

	Timer tim;
	tim.SetDt(300);

	//INTRsawave intsawave(200, 0, 1);
	//intsawave.Enable();

	INTRsinewave swave(100, 0, 50);
	swave.Enable();

	//INTRtriwave trwave(100, 0, 1);
	//trwave.Enable();

	//INTRpwmwave pwmwave(100, 0, 1);
	//pwmwave.SetDuty(0.3);
	//pwmwave.Enable();

	//INTRnoisewave nwave(100, 0, 10);
	//nwave.Enable();

	tim.SetClassInterrupter(&swave);
	//tim.SetClassInterrupter(&intr);
	tim.Enable();


	//Clock clk;
	//clk.Set(500, 100, 0);


	while(1){
		for(unsigned int i = 0; i < 50000; ++i);
			p1_1 = !p1_1;
		//	clk.Update();
	}
	
}
