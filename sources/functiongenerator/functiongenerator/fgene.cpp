/***********************************************************************/
/*                                                                     */
/*  FILE        :functiongenerator.cpp                                 */
/*  DATE        :Fri, May 08, 2015                                     */
/*  DESCRIPTION :main program file.                                    */
/*  CPU GROUP   :29                                                    */
/*                                                                     */
/*  This file is generated by Renesas Project Generator (Ver.4.19).    */
/*  NOTE:THIS IS A TYPICAL EXAMPLE.                                    */
/***********************************************************************/

#include "sfr_r829.h"
#include "LCDUtils.hpp"
#include "Dac.hpp"
#include "ClockSettings.hpp"
#include "SSUbus.hpp"
#include "Timer.hpp"
#include "ASawtooth.hpp"
#include "ASine.hpp"
#include "ATriangle.hpp"
#include "APWM.hpp"
#include "ANoise.hpp"


#include "FunctionGenerator.hpp"



#include "UIUtils.hpp"


#include "KeyInterruption.hpp"


#include "FGStateMachine.hpp"

//extern ANone m_anone;
//extern ASawtooth m_asawtooth(100, 0, 50);
//extern ASine m_asine(100, 0, 50);
//extern ATriangle m_atriangle(200, 0, 10);
//extern APWM m_apwm(100, 0, 50);
//extern ANoise m_anoise(100, 0, 10);
//
//extern ANone * p_anone = &m_anone;
//extern ASawtooth * p_asawtooth = &m_asawtooth;
//extern ASine * p_asine = &m_asine;
//extern ATriangle * p_atriangle = &m_atriangle;
//extern APWM * p_apwm = &m_apwm;
//extern ANoise * p_anoise = &m_anoise;

/*

	ピン配置
	SSU_CK		P3_5/SCL/SSCK/TRCIOD
	SSU_OUT		P3_7/TRAO/SSO/RXD1/(TXD1)(注2)
	RST			RESET
				XOUT/XCOUT/P4_7(注1、3)
				VSS/AVSS
				XIN/XCIN/P4_6(注3)
				VCC/AVCC
				MODE
	RXD_1 or	P4_5/INT0/(RXD1)(注2)
	B_MODE		P1_7/TRAIO/INT1

	//SSU_CS		P3_4/SDA/SCS/TRCIOC
	//			P3_3/INT3/SSI/TRCCLK
	//LCD_0		P1_0/KI0/AN8
	//LCD_1		P1_1/KI1/AN9/TRCIOA/TRCTRG
	//			VREF/P4_2
	//LCD_2		P1_2/KI2/AN10/TRCIOB
	//LCD_3		P1_3/KI3/AN11/TRBO
	//LCD_E		P1_4/TXD0
	//LCD_CC		P1_5/RXD0/(TRAIO)/(INT1)(注2)
	//			P1_6/CLK0/(SSI)(注2)

	SSU_CS		P3_4/SDA/SCS/TRCIOC
	B_SEL		P3_3/INT3/SSI/TRCCLK
	B_UP		P1_0/KI0/AN8
	B_DOWN		P1_1/KI1/AN9/TRCIOA/TRCTRG
	LCD_E		VREF/P4_2
	LCD_CC		P1_2/KI2/AN10/TRCIOB
	LCD_0		P1_3/KI3/AN11/TRBO
	LCD_1		P1_4/TXD0
	LCD_2		P1_5/RXD0/(TRAIO)/(INT1)(注2)
	LCD_3		P1_6/CLK0/(SSI)(注2)

	0000 0111
*/




//#include "Clock.hpp"

void main(void);

//class INTRtest : public INTRbase{
//public:
//	unsigned int j;
//	Dac dac;
//	INTRtest(){
//		j = 0;
//	}
//	void intr1(){
//		p1_0 = !p1_0;
//		j = (j > (0x0FFF - 1)) ? 0 : j + 100;
//		dac.WriteVoltageA(j);
//	}
//	void op(){
//		intr1();
//	}
//};

//class INTRsawave : public ASawtooth, public INTRbase{
//public:
//	INTRsawave(unsigned int freq, unsigned int phase, float gain)
//		: ASawtooth(freq, phase, gain){};
//	unsigned int j;
//	Dac dac;
//	void op(){
//		//j = Out();
//		j = GetValueNow();
//		dac.WriteVoltageA(j);
//	}
//};
//
//class INTRsinewave : public ASine, public INTRbase{
//public:
//	INTRsinewave(unsigned int freq, unsigned int phase, float gain)
//		: ASine(freq, phase, gain){};
//	unsigned int j;
//	Dac dac;
//	void op(){
//		j = Out();
//		//j = GetValueNow();
//		dac.WriteVoltageA(j);
//	}
//};
//
//class INTRtriwave : public ATriangle, public INTRbase{
//public:
//	INTRtriwave(unsigned int freq, unsigned int phase, float gain)
//		: ATriangle(freq, phase, gain){};
//	unsigned int j;
//	Dac dac;
//	void op(){
//		//j = Out();
//		j = GetValueNow();
//		dac.WriteVoltageA(j);
//	}
//};
//
//class INTRpwmwave : public APWM, public INTRbase{
//public:
//	INTRpwmwave(unsigned int freq, unsigned int phase, float gain)
//		: APWM(freq, phase, gain){};
//	unsigned int j;
//	Dac dac;
//	void op(){
//		//j = Out();
//		j = GetValueNow();
//		dac.WriteVoltageA(j);
//	}
//};
//
//class INTRnoisewave : public ANoise, public INTRbase{
//public:
//	INTRnoisewave(unsigned int freq, unsigned int phase, float gain)
//		: ANoise(freq, phase, gain){};
//	unsigned int j;
//	Dac dac;
//	void op(){
//		j = Out();
//		//j = GetValueNow();
//		dac.WriteVoltageA(j);
//	}
//};

//class INTRfg2 : public FunctionGenerator, public INTRbase {
//public:
//	INTRfg2() : FunctionGenerator() {};
//
//	void op() {
//		Update();
//		//p1_0 = !p1_0;
//	}
//};
//
//class INTRint : public BtnEvent {
//	LCDUtils lcd;
//public:
//	INTRint()
//		:lcd()
//	{
//		lcd.Initialize();
//		lcd.Clear();
//		lcd.WriteLineDown("KIKUTI");
//	}
//
//	void mode() {
//		lcd.WriteLineUp("MODE  ");
//	}
//
//	void select() {
//		lcd.WriteLineUp("SELECT");
//	}
//
//	void up() {
//		lcd.WriteLineUp("UP     ");
//	}
//
//	void down() {
//		lcd.WriteLineUp("DOWN   ");
//	}
//
//};
//

//class INTRint : public BtnEvent{
//	
//public:
//	FGStateMachine FGM;
//
//	INTRint(INTRfg * ffg)
//		:FGM(ffg)
//	{
//		;
//	}
//
//	void mode(){
//		FGM.Mode();
//	}
//
//	void select(){
//		FGM.Select();
//	}
//
//	void up(){
//		FGM.Up();
//	}
//
//	void down(){
//		FGM.Down();
//	}
//
//};

/*
class INTRint : public BtnEvent{

public:
	FGStateMachine FGM;

	INTRint()
		:FGM()
	{
		;
	}

	void mode(){
		FGM.Mode();
	}

	void select(){
		FGM.Select();
	}

	void up(){
		FGM.Up();
	}

	void down(){
		FGM.Down();
	}

};*/


//
//class INTRint2 : public BtnEvent {
//	//LCDUtils lcd;
//	UIUtils uiu;
//public:
//	INTRint2(INTRfg2 * _fg2)
//		:uiu()
//	{
//		uiu.GetHundleLCD()->WriteLineUp("KIKUTI");
//		fg2 = _fg2;
//	}
//
//	void mode() {
//
//		uiu.GetHundleLCD()->WriteLineUp("MODE  ");
//		uiu.GetHundleLCD()->WriteLineDown(
//			(char *)uiu.GetTextFromID(fg2->GetIdFromSlotMasterIndex(0))
//			);
//	}
//
//	void select() {
//		uiu.GetHundleLCD()->WriteLineUp("SELECT");
//		uiu.GetHundleLCD()->WriteLineDown(
//			(char *)uiu.GetTextFromID(fg2->GetIdFromSlotMasterIndex(1))
//			);
//	}
//
//	void up() {
//		uiu.GetHundleLCD()->WriteLineUp("UP     ");
//		uiu.GetHundleLCD()->WriteLineDown(
//			(char *)uiu.GetTextFromID(fg2->GetIdFromSlotMasterIndex(2))
//			);
//	}
//
//	void down() {
//		uiu.GetHundleLCD()->WriteLineUp("DOWN   ");
//		uiu.GetHundleLCD()->WriteLineDown(
//			(char *)uiu.GetTextFromID(fg2->GetIdFromSlotMasterIndex(3))
//			);
//	}
//
//	INTRfg2 * fg2;
//};

/*
	FGのなぞについて
	MAIN中に定義すると問題なく動作する。
	これよりメイン中にFGを生成し、これのインスタンスを取得、ステートマシンに渡すことでFGの制御を行う
	FGは外部より制御されなければならない
	MAIN中よりの制御は信号送信は問題ない

*/

void main(void)
{

	ClockSettings clkstg;
	clkstg.Initialize();


	//ここからFGステートマシンの制御指令を出力
	//static INTRfg fg;


	Timer tim;
	tim.SetDt(300);

	static INTRFG fg;
	static UIUtils uiu;
	static FGStateMachine fgm;

	INTRSM ii(&fg, &fgm, &uiu);//(&fg

	static KeyInterruption ki;

	ki.Initialize();
	ki.SetEvent(&ii);
	ki.Enable();


	tim.SetClassInterrupter(&fg);
	tim.Enable();

	//ii.mode();


	{

		//static Dac dac;
		//Dac::SInitialize();
		//Dac dac;

		//INTRtest intr;

		//UIUtils uiu;
		//
		//UIView uiv;
		//UISet uis;
		//UIInsertion uii;

		//uiu.WriteFrequency2(23321, 3);

		//ASine anoise(1233, 0, 100);
		//ATriangle atr(3245, 0, 50);
		//uiv.Set(&anoise, 3);
		//uis.Set(&anoise, 4, UIUtils::UI_MODE_GAIN);
		//uii.Set(&anoise, &atr);

		//pd1_1 = 1;
		//p1drr1 = 1;
		//p1_1 = 0;

		//pd1_0 = 1;
		//p1_0 = 0;

		//LCDUtils lcd;
		//lcd.Initialize();

		//lcd.Clear();

		//lcd.WriteLineUp("KIKUTI1111111111");

		//lcd.SetCursor(0,1);
		//lcd.WriteNumber6(12345);

		//lcd.WriteLineUp("KIKUTI1111111111");
		//lcd.WriteLineDown("KIKUTI2222");


		//lcd.Test();

		//Timer tim;
		//tim.SetDt(300);

		//UIUtils uiu;

		//UIView uiv;
		//UISet uis;
		//UIInsertion uii;

		//ASine anoise(1233, 0, 100);
		//ATriangle atr(3245, 0, 50);
		//uiv.Set(&anoise, 3);
		//uis.Set(&anoise, 4, UIUtils::UI_MODE_GAIN);
		//uii.Set(&anoise, &atr);


		//INTRsawave intsawave(200, 0, 1);
		//intsawave.Enable();

		//INTRsinewave swave(100, 0, 50);
		//swave.Enable();

		//INTRtriwave trwave(100, 0, 1);
		//trwave.Enable();

		//INTRpwmwave pwmwave(100, 0, 1);
		//pwmwave.SetDuty(0.3);
		//pwmwave.Enable();

		//INTRnoisewave nwave(100, 0, 10);
		//nwave.Enable();


		//ASawtooth m_asawtooth(100, 0, 10);
		//ASine m_asine(100, 0, 10);



		//static INTRfg2 fg;

		////tim.SetClassInterrupter(&swave);
		////tim.SetClassInterrupter(&intr);
		//tim.SetClassInterrupter(&fg);
		//tim.Enable();

		//fg.InsertWaveFromPoolToSlotMasterIndex(0, 2);
		//fg.InsertWaveFromPoolToSlotMasterIndex(1, 5);

	}

	//Clock clk;
	//clk.Set(500, 100, 0);
	unsigned char _j = 0;

	//char tmpp[16];
	//
	//lcd.SetCursor(0,0);
	//lcd.WriteNumber(123456);

	//uiu.Output(&uiv);
	//uiu.Output(&uis);
	//uiu.Output(&uii);

	while (1) {
		for (unsigned long i = 0; i < 1000; ++i);

		//lcd.SetCursor(0,0);
		//lcd.WriteNumber(_j++);

		//sprintf(tmpp, "aa%d", _j);

		//lcd.WriteLineDown(tmpp);
		//	clk.Update();
		//	fg.op();
	}




}
