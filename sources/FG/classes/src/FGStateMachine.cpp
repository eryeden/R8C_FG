//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : FGStateMachine.hpp
//  @ Date : 2015/09/24
//  @ Author : 
//
//


#include "FGStateMachine.hpp"
//
FGStateMachine::FGStateMachine()
	:state_slots()
	, state_dutyratio()
	, state_freq()
	, state_gain()
	, state_insertion()
	, state_phase()
{
	;
}

FGStateMachine::FGStateMachine(INTRFG *_fg, UIUtils *_uiu)
	:state_slots()
	, state_dutyratio()
	, state_freq()
	, state_gain()
	, state_insertion()
	, state_phase()
{
	//fg = _fg;
	//ui_utils = _uiu;

	//state_now = &state_slots;
	//idx_selected = 0;

	//state_slots.SetFunctionGenerator(fg);
	//state_freq.SetFunctionGenerator(fg);
	//state_phase.SetFunctionGenerator(fg);
	//state_gain.SetFunctionGenerator(fg);
	//state_dutyratio.SetFunctionGenerator(fg);
	//state_insertion.SetFunctionGenerator(fg);

	//state_slots.SetUIUtils(ui_utils);
	//state_freq.SetUIUtils(ui_utils);
	//state_phase.SetUIUtils(ui_utils);
	//state_gain.SetUIUtils(ui_utils);
	//state_dutyratio.SetUIUtils(ui_utils);
	//state_insertion.SetUIUtils(ui_utils);

	//state_now->Mode();
	Initialize(_fg, _uiu);
}

void FGStateMachine::Initialize(INTRFG *_fg, UIUtils *_uiu) {
	fg = _fg;
	ui_utils = _uiu;

	state_now = &state_slots;
	idx_selected = 0;

	state_slots.SetFunctionGenerator(fg);
	state_freq.SetFunctionGenerator(fg);
	state_phase.SetFunctionGenerator(fg);
	state_gain.SetFunctionGenerator(fg);
	state_dutyratio.SetFunctionGenerator(fg);
	state_insertion.SetFunctionGenerator(fg);

	state_slots.SetUIUtils(ui_utils);
	state_freq.SetUIUtils(ui_utils);
	state_phase.SetUIUtils(ui_utils);
	state_gain.SetUIUtils(ui_utils);
	state_dutyratio.SetUIUtils(ui_utils);
	state_insertion.SetUIUtils(ui_utils);

	state_slots.Initialize();
	state_insertion.Initialize();

	state_now->Mode();
}

//
//FGStateMachine::FGStateMachine(INTRfg *ffg)
//	:tim(), ui_utils()
//{
//	fg = ffg;
//
//	state_now = &state_slots;
//	idx_selected = 0;
//
//	
//
//	state_slots.SetFunctionGenerator(fg);
//	state_freq.SetFunctionGenerator(fg);
//	state_phase.SetFunctionGenerator(fg);
//	state_gain.SetFunctionGenerator(fg);
//	state_dutyratio.SetFunctionGenerator(fg);
//	state_insertion.SetFunctionGenerator(fg);
//
//	
//
//	state_slots.SetUIUtils(&ui_utils);
//	state_freq.SetUIUtils(&ui_utils);
//	state_phase.SetUIUtils(&ui_utils);
//	state_gain.SetUIUtils(&ui_utils);
//	state_dutyratio.SetUIUtils(&ui_utils);
//	state_insertion.SetUIUtils(&ui_utils);
//
//	//ui_utils.GetHundleLCD()->WriteLineUp("TST");
//	
//	//Fgene初期化
//	tim.SetDt(300);
//	tim.SetClassInterrupter(fg);
//	//tim.Enable();
//
//
//	//fg->InsertWaveFromPoolToSlotMasterIndex(1, 1);
//	//fg->InsertWaveFromPoolToSlotMasterIndex(2, 2);
//	//fg->InsertWaveFromPoolToSlotMasterIndex(3, 3);
//	//fg->InsertWaveFromPoolToSlotMasterIndex(4, 4);
//
//	state_now->Mode();
//
//}


void FGStateMachine::Up() {
	state_now->Up();
}

void FGStateMachine::Down() {
	state_now->Down();
}

void FGStateMachine::Select() {
	state_now->Select();
}

void FGStateMachine::Mode() {
	TransitState();
}

//ステートマシンもどき
void FGStateMachine::TransitState() {

	//カーソルをOFFにする
	ui_utils->GetHundleLCD()->EnableCursor(false);

	switch (state_now->GetID())
	{
	case ID_STATE_SLOTS:

		idx_selected = state_slots.GetIndexSelected();

		if (fg->GetIdFromSlotMasterIndex(idx_selected) == Settings::WAVE_ID_APWM) {

			state_dutyratio.SetIndexSelected(idx_selected);
			state_now = &state_freq;

		}
		else if (fg->GetIdFromSlotMasterIndex(idx_selected) == Settings::WAVE_ID_ANOISE) {

			state_now = &state_gain;

		}
		else if (fg->GetIdFromSlotMasterIndex(idx_selected) == Settings::WAVE_ID_ANONE){
			state_now = &state_insertion;
		}
		else {

			state_now = &state_freq;

		}

		//カーソルをOFFにする
		//ui_utils->GetHundleLCD()->EnableCursor(false);

		state_now->SetIndexSelected(idx_selected);
		state_now->Mode();

		//ui_utils->GetHundleLCD()->WriteLineUp("SLOTS");

		break;

	case ID_STATE_FREQ:
		if (fg->GetIdFromSlotMasterIndex(idx_selected) == Settings::WAVE_ID_APWM) {
			state_now = &state_gain;
			state_now->SetIndexSelected(idx_selected);
			state_now->Mode();
		}else {
			//state_now = &state_phase;
			state_now = &state_gain;
			state_now->SetIndexSelected(idx_selected);
			state_now->Mode();
		}
		//ui_utils->GetHundleLCD()->WriteLineUp("FREQ");
		break;

	case ID_STATE_PHASE:

		state_now = &state_gain;
		state_now->SetIndexSelected(idx_selected);
		state_now->Mode();

		//ui_utils->GetHundleLCD()->WriteLineUp("PHASE");
		break;

	case ID_STATE_GAIN:
		if (fg->GetIdFromSlotMasterIndex(idx_selected) == Settings::WAVE_ID_APWM) {
			state_now = &state_dutyratio;
			state_now->SetIndexSelected(idx_selected);
			state_now->Mode();
		}
		else {
			state_now = &state_insertion;
			state_now->SetIndexSelected(idx_selected);
			state_now->Mode();
		}
		//ui_utils->GetHundleLCD()->WriteLineUp("GAIN");
		break;

	case ID_STATE_DUTYRATIO:

		state_now = &state_insertion;
		state_now->SetIndexSelected(idx_selected);
		state_now->Mode();
		//ui_utils->GetHundleLCD()->WriteLineUp("DR");
		break;

	case ID_STATE_INSERTION:

		state_now = &state_slots;
		state_now->SetIndexSelected(idx_selected);
		//カーソルをOFFにする
		//ui_utils->GetHundleLCD()->EnableCursor(false);
		state_now->Mode();
		//ui_utils->GetHundleLCD()->WriteLineUp("INS");
		break;

	default:
		//カーソルをOFFにする
		//ui_utils->GetHundleLCD()->EnableCursor(false);
		state_now = &state_slots;
		state_now->SetIndexSelected(idx_selected);
		state_now->Mode();
		//ui_utils->GetHundleLCD()->WriteLineUp("DF");
		break;
	}
}



