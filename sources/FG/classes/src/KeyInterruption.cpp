//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : KeyInterruption.cpp
//  @ Date : 2015/06/24
//  @ Author : 
//
//


#include "KeyInterruption.hpp"
#include "sfr_r829.h"

#define BUTTON_PULLUP


void _wait_us(unsigned int us){
	unsigned int tm = us * 20;
	for (int i = 0; i < tm; ++i){
		asm("nop");
	}
}

void _wait_ms(unsigned int ms){
	for (int i = 0; i < ms; ++i){
		_wait_us(1000);
	}
}


//class INTRclass{
//public:
//	INTRbase *ib;
//	void run(){
//		ib->op();
//	}
//};

class INTRbuttons{
public:
	BtnEvent *be;
	void mode(){
		be->mode();
	}
	void select(){
		be->select();
	}
	void up(){
		be->up();
	}
	void down(){
		be->down();
	}
};

//INTRclass int_mode;
//INTRclass int_sel;
//INTRclass int_up;
//INTRclass int_down;

INTRbuttons int_btn;

KeyInterruption::KeyInterruption(){
	;
}

void KeyInterruption::Initialize(){
	//割り込み禁止
	asm("FCLR I");


#ifdef BUTTON_PULLUP
	//INT1, 3初期化
	int1pl = 1;
	int3pl = 1;

	int1f0 = 1;
	int1f1 = 1;
	int3f0 = 1;
	int3f1 = 1;

	int1en = 1;
	int3en = 1;

	//キー入力割り込み初期化 KI0, KI1, 立ち上がり
	pd1_0 = 0;
	pd1_1 = 0;

	ki0pl = 0;
	ki1pl = 0;

	ki0en = 1;
	ki1en = 1;

#else
	//INT1, 3初期化
	int1pl = 0;
	int3pl = 0;

	int1f0 = 1;
	int1f1 = 1;
	int3f0 = 1;
	int3f1 = 1;

	int1en = 1;
	int3en = 1;

	//キー入力割り込み初期化 KI0, KI1, 立ち上がり
	pd1_0 = 0;
	pd1_1 = 0;

	ki0pl = 1;
	ki1pl = 1;

	ki0en = 1;
	ki1en = 1;

#endif


	////INT1, 3初期化
	//int1pl = 0;
	//int3pl = 0;

	//int1f0 = 1;
	//int1f1 = 1;
	//int3f0 = 1;
	//int3f1 = 1;

	//int1en = 1;
	//int3en = 1;

	////割り込み許可
	//pol_int1ic = 1;
	//pol_int3ic = 1;

	//ilvl0_int1ic = 0;
	//ilvl1_int1ic = 1;
	//ilvl2_int1ic = 1;

	//ilvl0_int3ic = 0;
	//ilvl1_int3ic = 1;
	//ilvl2_int3ic = 1;

	

	////キー入力割り込み初期化 KI0, KI1, 立ち上がり
	//pd1_0 = 0;
	//pd1_1 = 0;

	//ki0pl = 1;
	//ki1pl = 1;

	//ki0en = 1;
	//ki1en = 1;

	////割り込み許可
	//ilvl0_kupic = 0;
	//ilvl1_kupic = 1;
	//ilvl2_kupic = 1;


}


void KeyInterruption::Enable(){

	////割り込み許可
	//pol_int1ic = 0;
	//pol_int3ic = 0;


#ifdef BUTTON_PULLUP
	pol_int1ic = 0;
	pol_int3ic = 0;
#else
	pol_int1ic = 1;
	pol_int3ic = 1;
#endif

	ilvl0_int1ic = 0;
	ilvl1_int1ic = 1;
	ilvl2_int1ic = 1;

	ilvl0_int3ic = 0;
	ilvl1_int3ic = 1;
	ilvl2_int3ic = 1;

	//割り込み許可
	ilvl0_kupic = 0;
	ilvl1_kupic = 1;
	ilvl2_kupic = 1;


	//割り込み許可
	asm("FSET I");
}

//void KeyInterruption::SetEventMode(INTRbase * pib){
//	int_mode.ib = pib;	
//}
//
//void KeyInterruption::SetEventSelect(INTRbase * pib){
//	int_sel.ib = pib;
//}
//
//void KeyInterruption::SetEventUp(INTRbase * pib){
//	int_up.ib = pib;
//}
//
//void KeyInterruption::SetEventDown(INTRbase * pib){
//	int_down.ib = pib;
//}

void KeyInterruption::SetEvent(BtnEvent * be){
	int_btn.be = be;
}

#pragma INTERRUPT t_intr_mode (vect=25)
void t_intr_mode(){
	//入力禁止
	int1en = 0;

	_wait_ms(10);
	//int_mode.run();
	int_btn.mode();

	//入力許可
	int1en = 1;
}

#pragma INTERRUPT t_intr_sel (vect=26)
void t_intr_sel(){
	//入力禁止
	int3en = 0;

	_wait_ms(10);
	//int_sel.run();
	int_btn.select();

	//入力許可
	int3en = 1;
}

//立ち上がりで発生とする
//プルアップしてるときは立下りにする
#pragma INTERRUPT t_intr_key (vect=13)
void t_intr_key(){
	//入力禁止
	//ki0en = 0;
	//ki1en = 0;
#ifdef BUTTON_PULLUP

	if (p1_0 == 0){
		_wait_ms(10);
		//int_up.run();
		int_btn.up();
		return;
	} else if (p1_1 == 0){
		_wait_ms(10);
		//int_down.run();
		int_btn.down();
		return;
	}else{
		//int_btn.down();
		return;
	}


#else


	wait_ms(10);
	if (p1_0 == 1){
		int_up.run();
		return;
	}
	else if (p1_1 == 1){
		int_down.run();
		return;
	}

#endif

	////入力禁止
	//ki0en = 0;
	//ki1en = 0;

	//wait_ms(10);
	//if (p1_0 == 1){
	//	int_up.run();
	//	return;
	//} else if (p1_1 == 1){
	//	int_down.run();
	//	return;
	//}

	//入力許可
	//ki0en = 1;
	//ki1en = 1;
}















