//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  Project : Function Generator
//  @ File Name : Clock.cpp
//  @ Date : 2015/05/25
//  @ Author : Kazuki Kikuchi
//
//


#include "Clock.hpp"
#include "Timer.hpp"

Clock::Clock()
	: m_nop(0)
	, m_dt(0)
	, m_pinv(0)
	, m_phase(0)
	, m_f(0)
//	, m_k(0)
	, m_phase_shift_point(0)
	, m_scale(0)
	, m_k_f(0)
{
	m_scale = 3;
}

void Clock::SetFreq(unsigned int fin) {
	m_f = fin;
	m_pinv = (float)(m_f * m_nop) * m_dt; 

	//m_fp_f = m_f << m_scale;
	////m_fp_pinv = (((m_fp_f * m_fp_nop) >> m_scale) * m_fp_dt) >> m_scale;
	//m_fp_pinv = (((m_fp_f * m_fp_nop) >> m_scale) * m_fp_dt_us) >> m_scale / (1000000 >> m_scale);
	
}

void Clock::SetDt() {
	//m_dt = dtin;
	m_dt = Timer::SGetDt();
	unsigned int tmp = 1;
	for (int i = 0; i < m_scale; i++){
		tmp *= 2;
	}
	//m_fp_dt = (unsigned long)(m_dt * (float)tmp);
	//m_fp_dt_us = (unsigned long) (m_dt * 1000000.0 * (float)tmp);
}

void Clock::SetNop(unsigned int nopin) {
	m_nop = nopin;
	//m_fp_nop = m_nop << m_scale;
}

void Clock::SetPhase(float phain) {
	m_phase = phain;
	m_phase_shift_point = (unsigned int)((float)m_nop * m_phase);

	/*unsigned int tmp = 1;
	for (int i = 0; i < m_scale; i++){
		tmp *= 2;
	}
	m_fp_phase_shift_point = (unsigned long)((float) m_nop * m_phase * (float)tmp);
	m_fp_phase_shift_point = m_phase_shift_point << m_scale;*/
}

void Clock::Set(unsigned int fin, unsigned int nopin, unsigned int phain){
	SetDt();
	SetNop(nopin);
	SetFreq(fin);
	SetPhase(phain);
}

unsigned int Clock::Update() {
	//m_k = (m_k + (unsigned int)m_pinv + m_phase_shift_point) % m_nop;

	m_k_f += m_pinv + (float)m_phase_shift_point;
	if (m_k_f > m_nop){m_k_f = 0;}
	//m_k = (unsigned int)m_k_f;

	//m_k = (m_k + (m_fp_pinv >> m_scale) + (m_fp_phase_shift_point >> m_scale)) % m_nop;
	//m_fp_k = (m_fp_k + m_fp_pinv + m_fp_phase_shift_point);
	//m_k = (m_fp_k >> m_scale) % m_nop;
	return (unsigned int) m_k_f;
}

unsigned int Clock::GetFreq(){ return m_f;};
float Clock::GetDt(){ return m_dt;};
unsigned int Clock::GetNop(){ return m_nop;};
unsigned int Clock::GetPhase(){ return m_phase;};


