//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : FGState.hpp
//  @ Date : 2015/09/24
//  @ Author : 
//
//


#if !defined(_FGSTATE_H)
#define _FGSTATE_H

#include "FunctionGenerator.hpp"
#include "UIUtils.hpp"

static const unsigned char ID_STATE_SLOTS = 0x01;
static const unsigned char ID_STATE_FREQ = 0x02;
static const unsigned char ID_STATE_PHASE = 0x03;
static const unsigned char ID_STATE_GAIN = 0x04;
static const unsigned char ID_STATE_DUTYRATIO = 0x05;
static const unsigned char ID_STATE_INSERTION = 0x06;


class FGState {
public:
	FGState();
	virtual void Up() = 0;
	virtual void Down() = 0;
	virtual void Select() = 0;
	virtual void Mode() = 0;
	virtual unsigned char GetID() = 0;
	void SetIndexSelected(unsigned char idx);
	void SetFunctionGenerator(FunctionGenerator * fg);
	void SetUIUtils(UIUtils * uiu);
private:
protected:
	unsigned char idx_selected;
	FunctionGenerator* fg;
	UIUtils * ui_utils;
};

class StateSlots : public FGState {
public:
	StateSlots();

	void Up();
	void Down();
	void Select();
	void Mode();

	unsigned char GetIndexShow1();
	unsigned char GetIndexShow2();
	unsigned char GetIndexSelected();

	void Initialize();


	unsigned char GetID();

private:

	unsigned char idx_show1;
	unsigned char idx_show2;
	unsigned char no_slots_max;

	void Output();

};

class StateFrequency : public FGState {
public:
	StateFrequency();
	void Up();
	void Down();
	void Select();
	void Mode();

	unsigned char GetID();

private:
	void Output();

	unsigned char scale;

};

class StatePhase : public FGState {
public:
	StatePhase() : FGState() { ; }
	void Up();
	void Down();
	void Select();
	void Mode();

	unsigned char GetID();

private:
	void Output();
	unsigned char scale;

};

class StateGain : public FGState {
public:
	StateGain();
	void Up();
	void Down();
	void Select();
	void Mode();

	unsigned char GetID();

private:
	void Output();
	unsigned char scale;
	int gain;

};

class StateDutyRatio : public FGState {
public:
	StateDutyRatio() : FGState() { ; }
	void Up();
	void Down();
	void Select();
	void Mode();

	unsigned char GetID();

private:

	void Output();
	unsigned char scale;
};

class StateInsertion : public FGState {
public:
	StateInsertion();
	void Initialize();
	void Up();
	void Down();
	void Select();
	void Mode();

	unsigned char GetID();

private:

	unsigned char iidx_show1;
	unsigned char iidx_show2;
	unsigned char idx_insert;
	unsigned char no_slots_max;

	void Output();
};

#endif  //_FGSTATE_H
